# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe("/addresses", type: :request) do
  # This should return the minimal set of attributes required to create a valid
  # Address. As you add validations to Address, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      street: "1234 Main St",
      zip: 12345,
    }
  end

  let(:invalid_attributes) do
    {
      street: "1234 Main St",
      zip: nil,
    }
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_address_url
      expect(response).to(be_successful)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Address" do
        expect do
          post(addresses_url, params: { address: valid_attributes })
        end.to(change(Address, :count).by(1))
      end

      it "redirects to the created address" do
        post addresses_url, params: { address: valid_attributes }
        expect(response).to(redirect_to(forecast_url(Address.last.zip, street: Address.last.street)))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Address" do
        expect do
          post(addresses_url, params: { address: invalid_attributes })
        end.to(change(Address, :count).by(0))
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post addresses_url, params: { address: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested address" do
      address = Address.create!(valid_attributes)
      expect do
        delete(address_url(address))
      end.to(change(Address, :count).by(-1))
    end

    it "redirects to the addresses list" do
      address = Address.create!(valid_attributes)
      delete address_url(address)
      expect(response).to(redirect_to(addresses_url))
    end
  end
end
